name: Daily Forecast Retraining

on:
  schedule:
    - cron: '0 1 * * *'   # 01:00 UTC nightly
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: retrain-${{ github.ref }}
  cancel-in-progress: true

jobs:
  retrain:
    runs-on: ubuntu-latest
    env:
      TZ: UTC
      PYTHONUNBUFFERED: "1"
      # App secrets / APIs (set these in repo secrets if you use them)
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
      FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
      # Accuracy DB location used by retrain_forecasts.py
      ACCURACY_DB_URL: sqlite:///forecast_accuracy.db
      FORCE_RETRAIN: "1"   # optional: retrain even if no prior logs

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ✅ Use source directly; don't try to pip-install the repo
      - name: Set PYTHONPATH (so imports find your code)
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Prepare output folders
        run: |
          mkdir -p forecast_logs models
          [ -f forecast_metrics.csv ] || echo "timestamp,ticker,mae,mse,r2" > forecast_metrics.csv

      - name: Run forecast retraining (tolerant if metrics exist)
        run: |
          set +e
          python -u retrain_forecasts.py
          code=$?
          set -e
          echo "retrain exit code: $code"
          echo "── forecast_logs contents ──"
          ls -lah forecast_logs || true
          if [ $code -ne 0 ] && [ ! -s forecast_metrics.csv ]; then
            echo "No metrics produced; failing job."
            exit $code
          fi
          echo "Proceeding despite exit $code because metrics file exists."

      - name: Upload forecast logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: forecast-logs
          path: forecast_logs/
          if-no-files-found: ignore

      - name: Upload forecast metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: forecast-metrics
          path: forecast_metrics.csv
          if-no-files-found: ignore

      # --- Commit ONLY the DB; never commit models/charts/metrics ---
      - name: Commit & push updated DB only (rebase + retry)
        if: always()
        run: |
          set -eux
          BRANCH="${GITHUB_REF_NAME:-main}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage ONLY forecast_accuracy.db (explicit allow in .gitignore)
          git add forecast_accuracy.db || true

          # Guard: ensure nothing else is staged (prevents artifacts slipping in)
          ALLOWED_REGEX='^forecast_accuracy\.db$'
          if git diff --cached --name-only | grep -Ev "$ALLOWED_REGEX" | grep -E '.'; then
            echo "❌ Disallowed files staged. Aborting commit."
            git diff --cached --name-only | cat
            exit 1
          fi

          # No DB changes? exit cleanly.
          git diff --cached --quiet && { echo "No DB changes to commit."; exit 0; }

          git commit -m "Nightly: update forecast_accuracy.db ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"

          for attempt in 1 2 3; do
            git fetch origin "$BRANCH"
            git pull --rebase origin "$BRANCH" || true
            if git push origin "HEAD:$BRANCH"; then
              echo "Push succeeded on attempt $attempt"; exit 0
            fi
            echo "Push failed (attempt $attempt); retrying in 5s…"
            sleep 5
          done
          echo "Final push attempt failed."; exit 1
