# v.1_pg3_Signal_Leaderboard.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import os

# Path to the evaluation CSV generated by forecast_utils.py
EVAL_CSV_PATH = "forecast_eval/forecast_evals.csv"

st.set_page_config(layout="wide")
st.title("📊 Signal Leaderboard")
if not os.path.exists(EVAL_CSV_PATH):
    st.warning("No evaluation logs found yet.")
    st.stop()

# Load evaluation data
df = pd.read_csv(EVAL_CSV_PATH, parse_dates=['timestamp'])

# Sidebar filters
with st.sidebar:
    st.header("📂 Filters")
    tickers = sorted(df['ticker'].unique())
    selected = st.multiselect("Select tickers to view", tickers, default=tickers)
    date_range = st.date_input("Select date range", [df['timestamp'].min().date(), df['timestamp'].max().date()])

# Apply filters
filtered = df[(df['ticker'].isin(selected)) &
              (df['timestamp'].dt.date >= date_range[0]) &
              (df['timestamp'].dt.date <= date_range[1])]

# Show only latest score per ticker
latest_df = filtered.sort_values("timestamp").groupby("ticker").tail(1).sort_values("r2", ascending=False)

st.subheader("🏅 Latest Forecast Performance Per Ticker")
st.dataframe(latest_df.set_index("ticker")[["timestamp", "mae", "mse", "r2"]], use_container_width=True)

# Visual charts
st.subheader("📈 Visual Comparison")
metric = st.selectbox("Select metric to rank", ["mae", "mse", "r2"])
fig, ax = plt.subplots(figsize=(10, 5))
latest_df_sorted = latest_df.sort_values(metric, ascending=(metric != "r2"))
ax.barh(latest_df_sorted["ticker"], latest_df_sorted[metric], color="skyblue")
ax.set_xlabel(metric.upper())
ax.set_ylabel("Ticker")
ax.set_title(f"Latest {metric.upper()} by Ticker")
st.pyplot(fig)

# Download button
csv = latest_df.to_csv(index=False).encode()
st.download_button("📥 Download Latest Metrics", csv, file_name="latest_forecast_scores.csv")
